// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof

var Verifier = artifacts.require('Verifier');

contract('Verifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('testing Verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({
                from: account_one
            });

        })

        it('with correct proof', async function () {

            let CorrectProof = {

                "A":["0xef4efcf17f3d5604c65910aa571d226b1a87008789a0576f7983e5b0ee8e060", "0xbed166763a8c2c998a960da10103680ffd494063c4fa796dacd82bdc9dd2ec8"],
                "A_p":["0x13f68bde001234bc9eb3a0ae6ed388a01057d63da2620dea830e17dd9cc36ff7", "0x32f28e0e16c02369eda2d184773cfb116449c521e642ca9a20ea0418a996e20"],
                "B":
                    [["0xad80aa9f5e4378ef0dc942e3bd724668ec58074bf6565f7d7ca2e144c4a3f5a", "0x5601a954a648e4df2326828365c7531cdaa8da5824575a5d898342f676c4f60"], ["0x9517b7585accbfd3dac84f6dbf400f624418ec13bd974a0963b9ffb5e8f7fa6", "0x1628345512b0aaca29e1f03d27d0b43055e9de4d28aeeaf1f60c66eda1710196"]],
                
                "B_p":["0x15ca0403e0a0eb157332e93f312a000b9137d95d9cf1551b55d4cff004c360d", "0x223936e555193c49dc2b29c458a267263846c497320b57049711b352840f272d"],
                "C":["0x6820de3f068c288ad843e0d920481ff87d37c09838e6b00d705fdc733d26575", "0x12e04c39436202e57a66af4bba3370f974577434b3e003af649e6b61a1a31278"],
                "C_p":["0x1525b952b7a6a6d385b05bfd4918e572daea1511d8db19efeef6fec65adc2120", "0xd62c9b224137dfa88b7166086c98b0a6812d3983ae3d997b395f961bdb2a840"],
                "H":["0x1682a4c7f892e6ac038466a4325d135f5105870ade78c1f95f95294039cfb013", "0x28f10a7d16d3b558b336d164d0fa428f1c8e6e782ad4168ac9e793fdb1fe4420"],
                "K":["0x252c9c4b510ed8029ffa2c0c78300e24333418240b932a3886be76cc1db475af", "0x1f273dbc129f0437f8e06e06278e8fdb01c11c7342745071a779b58af73383aa"],
                "input": [9, 1]

            }
            let result = await this.contract.verifyTx.call(CorrectProof.A, CorrectProof.A_p, CorrectProof.B, CorrectProof.B_p, CorrectProof.C,
                CorrectProof.C_p, CorrectProof.H, CorrectProof.K, CorrectProof.input);
            assert.equal(result, true, "correct proof is not working");



        })

        it('with incorrect proof', async function () {
            let IncorrectProof = {

                "A_p": ["0x234f60bacd71c38d0399a0d2ec8bb27644041773c6b075c24f8fa8f464df1a34", "0x3ddd5fb356eb1474d7f5a2c68e9c6ddb6e1b5424111521e88993a4643bfb14c"],
                "A": ["0x1f5949a6173ca35c35f29e4f5ba2f2bf8bc1d21e393bed068e5a98e2580a4c72", "0x227863acc81fd032be79580fb7e5b38e82b400b898bc02668261e46cf85f8da3"],
                "B": [
                    ["0x12d8e35611a54a640ae4b9f415afeef79b119c9defa1f120dd173f15c674eefc", "0x1852bfdaa3545201b1c11b6044182ab4ef9f3cb997bc8c2c9e121aa3214d09a1"],
                    ["0x6f5567c8d594dd49866d65c94f4e8f2b1ecf37ef3620e68afe4e66bfd9d1c48", "0x2f2244bc84bbc80b88a1aa053c7cd2e2a4ff3a1cb8c1f5471837a1a6c5e43d34"]
                ],
                "B_p": ["0x27cf073cd636820f245fcb35d6bb28fdc4bf2af90c8e917b2c12e3748de38e1c", "0x107ab17ef7cf24988f2f57898d31ab4577cd5a4c215e045594b3588feddb372e"],
                "C": ["0xff134d886b7cd8b5d0580b13b7ee17757dd0c5d960bf692fc7faa433e30aad4", "0xcf1a56e9b39ef8eacebd14a848e0e876c5ae057ee8d8451e3b293b72f9b8c62"],
                "C_p": ["0xff6415c95ce06ba3aeb789afda518c00b46db90b5998205eea18ef4ae7241a7", "0xc54777575998dd7cf47a9753f6a06721a260237aa48bef10921a2edf7d3613b"],
                "H": ["0xf56d9a22f33948a03e1d9aa80c31680b33e3e257db6d74b4432ecb674e698d3", "0xfb530e3210092bcfc44c6db5261972838c631f0b6cb4dc274c35bd781dfa939"],
                "K": ["0x2324e0a52c99dde6db9729c8928d3b3c1498ec17dee6a450400f234c94adf179", "0x1941f0f029c39b6be46036d1027c6f2fd25418828c2feaa28438927996c1aa65"],
                "input": [9, 1]

            }
            let result = await this.contract.verifyTx.call(IncorrectProof.A, IncorrectProof.A_p, IncorrectProof.B, IncorrectProof.B_p, IncorrectProof.C,
                IncorrectProof.C_p, IncorrectProof.H, IncorrectProof.K, IncorrectProof.input);
            assert.equal(result, false, "correct proof is not working");
        })

    });
})